package dev.rohith.android;

import soot.*;
import soot.jimple.*;
import java.util.*;
import soot.util.Chain;
import soot.jimple.infoflow.InfoflowConfiguration;
import static soot.util.dot.DotGraph.DOT_EXTENSION;
 

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.Set;

import org.apache.commons.io.FilenameUtils;

import soot.MethodOrMethodContext;
import soot.Scene;
import soot.SootMethod;
import soot.jimple.infoflow.android.InfoflowAndroidConfiguration;
import soot.jimple.infoflow.android.SetupApplication;
import soot.jimple.toolkits.callgraph.CallGraph;
import soot.jimple.toolkits.callgraph.Edge;
import soot.util.dot.DotGraph;
import soot.util.queue.QueueReader;



public class StaticAnalysis {

    public static InfoflowAndroidConfiguration getFlowDroidConfig(String apkPath, String androidJar, InfoflowConfiguration.CallgraphAlgorithm cgAlgorithm) {
        final InfoflowAndroidConfiguration config = new InfoflowAndroidConfiguration();
        config.getAnalysisFileConfig().setTargetAPKFile(apkPath);
        config.getAnalysisFileConfig().setAndroidPlatformDir(androidJar);
        config.setCodeEliminationMode(InfoflowConfiguration.CodeEliminationMode.NoCodeElimination);
        config.setEnableReflection(true);
        config.setCallgraphAlgorithm(cgAlgorithm);
        return config;
    }

	/**
     * Iterate over the call Graph by visit edges one by one.
     * @param cg call graph
     */
    public static void analyzeCG(CallGraph cg) {
        DotGraph dot = new DotGraph("callgraph");

        QueueReader<Edge> edges = cg.listener();
        Set<String> visited = new HashSet<>();

     
        System.out.println("=========CG begins=========");
        // iterate over edges of the call graph
        while (edges.hasNext()) {
            Edge edge = edges.next();
            SootMethod target = (SootMethod) edge.getTgt();
            
            MethodOrMethodContext src = edge.getSrc();
            if (!visited.contains(src.toString())) {
                dot.drawNode(src.toString());
                visited.add(src.toString());
            }
            if (!visited.contains(target.toString())) {
                dot.drawNode(target.toString());
                visited.add(target.toString());
            }
            dot.drawEdge(src.toString(), target.toString());
        }

        System.out.println("=========CG ends=========");
        System.out.println(cg.size());

        dot.plot("./output"+ DOT_EXTENSION);
    }

	public static void generateCallGraph(String apkPath, String androidJar) {
        final InfoflowAndroidConfiguration config = getFlowDroidConfig(apkPath, androidJar, InfoflowConfiguration.CallgraphAlgorithm.CHA);
        SetupApplication app = new SetupApplication(config);
        
        // Create the Callgraph without executing taint analysis
        app.constructCallgraph();
        CallGraph callGraph = Scene.v().getCallGraph();

        analyzeCG(callGraph);
    }


    public static void main(String[] args){
    	//String USER_HOME = System.getProperty("user.home");
        // String androidPlatform = USER_HOME + "/usr/lib/android-sdk/platforms";
        if (args.length != 1) {
            System.err.println("You must provide the apk file path");
            return;
        }
        String androidPlatform = System.getenv("ANDROID_HOME")+ File.separator+"platforms";

        generateCallGraph(args[0], androidPlatform);
    }
}
