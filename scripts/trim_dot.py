import networkx as nx
import argparse

total_paths_found = 0

def parse_output(file_out):
	st = set()
	with open(file_out) as f:
		data = f.read()
		
	data = data.split("{")[1].split("}")[0].split("\n")[1:-1]
	for line in data:
		st.add(line)

	with open(file_out, 'w') as f:
		f.write('digraph "callgraph" {\n')
		for line in st:
			f.write('    {}\n'.format(line))
		f.write('}')


def generate_new_cg(f, G, node, max_paths, visited):
	global total_paths_found
	if node in visited.keys() and total_paths_found == max_paths:
		return
	visited[node] = True
	f.write('"{}";\n'.format(node))
	
	if len(list(G.predecessors(node))) == 0:
		total_paths_found += 1

	for parent in G.predecessors(node):
		f.write('"{}" -> "{}";\n'.format(parent, node))
		generate_new_cg(f, G, parent, max_paths, visited)
		if total_paths_found == max_paths:
			break

	visited[node] = False

def trim_graph(G, max_paths, node, file_out):
	start_nodes = []
	for nd in G.nodes:
		if G.in_degree(nd) == 0:
			start_nodes.append(nd)
	visited = {}
	with open(file_out, 'w') as f:
		f.write('digraph "callgraph" {\n')
		generate_new_cg(f, G, node, max_paths, visited)
		f.write('}')

	parse_output(file_out)

def construct_graph(file):
	G = nx.DiGraph()
	nodes = []
	
	with open(file) as f:
		data = f.read()

	data = data.split("{")[1].split("}")[0].split("\n")[1:-1]

	for line in data:
		if "->" not in line:
			if ";" in line:
				line = line.strip()[:-1]
			nodes.append(line.strip()[1:-1])
		
	G.add_nodes_from(nodes)

	for line in data:
		if "->" in line:
			if ";" in line:
				line = line.strip()[:-1]
			lst = line.strip().split("->")
			G.add_edge(lst[0].strip()[1:-1], lst[1].strip()[1:-1])

	return G

def initialize_args():
	parser = argparse.ArgumentParser(description='Trim the dot graph')
	parser.add_argument('--max_paths', type=int, default=1, help='max number of paths to iterate')
	parser.add_argument('--dest_node', help='destination node name')
	parser.add_argument('--input', help='input dot file path')
	parser.add_argument('--output', help='newly generated file path')

	args = parser.parse_args()

	if args.input is None:
		raise Exception("Input dot file path not provided")

	if args.output is None:
		raise Exception("Output dot file path not provided")

	if args.dest_node is None:
		raise Exception("Destination node not provided")

	return args.input, args.output, args.max_paths, args.dest_node


# node = "<com.fa.c.SystemService: byte[] HttpGet(java.lang.String)>"
if __name__ == "__main__":
	file_in, file_out, max_paths, dest_node = initialize_args()
	graph = construct_graph(file_in)
	trim_graph(graph, max_paths, dest_node, file_out)